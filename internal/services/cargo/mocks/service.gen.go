// Code generated by mockery v2.53.1. DO NOT EDIT.

package mocks

import (
	context "context"

	cargo "github.com/tbe-team/raybot/internal/services/cargo"

	mock "github.com/stretchr/testify/mock"
)

// FakeService is an autogenerated mock type for the Service type
type FakeService struct {
	mock.Mock
}

type FakeService_Expecter struct {
	mock *mock.Mock
}

func (_m *FakeService) EXPECT() *FakeService_Expecter {
	return &FakeService_Expecter{mock: &_m.Mock}
}

// CloseCargoDoor provides a mock function with given fields: ctx, params
func (_m *FakeService) CloseCargoDoor(ctx context.Context, params cargo.CloseCargoDoorParams) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for CloseCargoDoor")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, cargo.CloseCargoDoorParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeService_CloseCargoDoor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloseCargoDoor'
type FakeService_CloseCargoDoor_Call struct {
	*mock.Call
}

// CloseCargoDoor is a helper method to define mock.On call
//   - ctx context.Context
//   - params cargo.CloseCargoDoorParams
func (_e *FakeService_Expecter) CloseCargoDoor(ctx interface{}, params interface{}) *FakeService_CloseCargoDoor_Call {
	return &FakeService_CloseCargoDoor_Call{Call: _e.mock.On("CloseCargoDoor", ctx, params)}
}

func (_c *FakeService_CloseCargoDoor_Call) Run(run func(ctx context.Context, params cargo.CloseCargoDoorParams)) *FakeService_CloseCargoDoor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(cargo.CloseCargoDoorParams))
	})
	return _c
}

func (_c *FakeService_CloseCargoDoor_Call) Return(_a0 error) *FakeService_CloseCargoDoor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeService_CloseCargoDoor_Call) RunAndReturn(run func(context.Context, cargo.CloseCargoDoorParams) error) *FakeService_CloseCargoDoor_Call {
	_c.Call.Return(run)
	return _c
}

// GetCargo provides a mock function with given fields: ctx
func (_m *FakeService) GetCargo(ctx context.Context) (cargo.Cargo, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCargo")
	}

	var r0 cargo.Cargo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (cargo.Cargo, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) cargo.Cargo); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(cargo.Cargo)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeService_GetCargo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCargo'
type FakeService_GetCargo_Call struct {
	*mock.Call
}

// GetCargo is a helper method to define mock.On call
//   - ctx context.Context
func (_e *FakeService_Expecter) GetCargo(ctx interface{}) *FakeService_GetCargo_Call {
	return &FakeService_GetCargo_Call{Call: _e.mock.On("GetCargo", ctx)}
}

func (_c *FakeService_GetCargo_Call) Run(run func(ctx context.Context)) *FakeService_GetCargo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *FakeService_GetCargo_Call) Return(_a0 cargo.Cargo, _a1 error) *FakeService_GetCargo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FakeService_GetCargo_Call) RunAndReturn(run func(context.Context) (cargo.Cargo, error)) *FakeService_GetCargo_Call {
	_c.Call.Return(run)
	return _c
}

// OpenCargoDoor provides a mock function with given fields: ctx, params
func (_m *FakeService) OpenCargoDoor(ctx context.Context, params cargo.OpenCargoDoorParams) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for OpenCargoDoor")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, cargo.OpenCargoDoorParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeService_OpenCargoDoor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpenCargoDoor'
type FakeService_OpenCargoDoor_Call struct {
	*mock.Call
}

// OpenCargoDoor is a helper method to define mock.On call
//   - ctx context.Context
//   - params cargo.OpenCargoDoorParams
func (_e *FakeService_Expecter) OpenCargoDoor(ctx interface{}, params interface{}) *FakeService_OpenCargoDoor_Call {
	return &FakeService_OpenCargoDoor_Call{Call: _e.mock.On("OpenCargoDoor", ctx, params)}
}

func (_c *FakeService_OpenCargoDoor_Call) Run(run func(ctx context.Context, params cargo.OpenCargoDoorParams)) *FakeService_OpenCargoDoor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(cargo.OpenCargoDoorParams))
	})
	return _c
}

func (_c *FakeService_OpenCargoDoor_Call) Return(_a0 error) *FakeService_OpenCargoDoor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeService_OpenCargoDoor_Call) RunAndReturn(run func(context.Context, cargo.OpenCargoDoorParams) error) *FakeService_OpenCargoDoor_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCargoBottomDistance provides a mock function with given fields: ctx, params
func (_m *FakeService) UpdateCargoBottomDistance(ctx context.Context, params cargo.UpdateCargoBottomDistanceParams) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCargoBottomDistance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, cargo.UpdateCargoBottomDistanceParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeService_UpdateCargoBottomDistance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCargoBottomDistance'
type FakeService_UpdateCargoBottomDistance_Call struct {
	*mock.Call
}

// UpdateCargoBottomDistance is a helper method to define mock.On call
//   - ctx context.Context
//   - params cargo.UpdateCargoBottomDistanceParams
func (_e *FakeService_Expecter) UpdateCargoBottomDistance(ctx interface{}, params interface{}) *FakeService_UpdateCargoBottomDistance_Call {
	return &FakeService_UpdateCargoBottomDistance_Call{Call: _e.mock.On("UpdateCargoBottomDistance", ctx, params)}
}

func (_c *FakeService_UpdateCargoBottomDistance_Call) Run(run func(ctx context.Context, params cargo.UpdateCargoBottomDistanceParams)) *FakeService_UpdateCargoBottomDistance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(cargo.UpdateCargoBottomDistanceParams))
	})
	return _c
}

func (_c *FakeService_UpdateCargoBottomDistance_Call) Return(_a0 error) *FakeService_UpdateCargoBottomDistance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeService_UpdateCargoBottomDistance_Call) RunAndReturn(run func(context.Context, cargo.UpdateCargoBottomDistanceParams) error) *FakeService_UpdateCargoBottomDistance_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCargoDoor provides a mock function with given fields: ctx, params
func (_m *FakeService) UpdateCargoDoor(ctx context.Context, params cargo.UpdateCargoDoorParams) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCargoDoor")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, cargo.UpdateCargoDoorParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeService_UpdateCargoDoor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCargoDoor'
type FakeService_UpdateCargoDoor_Call struct {
	*mock.Call
}

// UpdateCargoDoor is a helper method to define mock.On call
//   - ctx context.Context
//   - params cargo.UpdateCargoDoorParams
func (_e *FakeService_Expecter) UpdateCargoDoor(ctx interface{}, params interface{}) *FakeService_UpdateCargoDoor_Call {
	return &FakeService_UpdateCargoDoor_Call{Call: _e.mock.On("UpdateCargoDoor", ctx, params)}
}

func (_c *FakeService_UpdateCargoDoor_Call) Run(run func(ctx context.Context, params cargo.UpdateCargoDoorParams)) *FakeService_UpdateCargoDoor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(cargo.UpdateCargoDoorParams))
	})
	return _c
}

func (_c *FakeService_UpdateCargoDoor_Call) Return(_a0 error) *FakeService_UpdateCargoDoor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeService_UpdateCargoDoor_Call) RunAndReturn(run func(context.Context, cargo.UpdateCargoDoorParams) error) *FakeService_UpdateCargoDoor_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCargoDoorMotorState provides a mock function with given fields: ctx, params
func (_m *FakeService) UpdateCargoDoorMotorState(ctx context.Context, params cargo.UpdateCargoDoorMotorStateParams) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCargoDoorMotorState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, cargo.UpdateCargoDoorMotorStateParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeService_UpdateCargoDoorMotorState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCargoDoorMotorState'
type FakeService_UpdateCargoDoorMotorState_Call struct {
	*mock.Call
}

// UpdateCargoDoorMotorState is a helper method to define mock.On call
//   - ctx context.Context
//   - params cargo.UpdateCargoDoorMotorStateParams
func (_e *FakeService_Expecter) UpdateCargoDoorMotorState(ctx interface{}, params interface{}) *FakeService_UpdateCargoDoorMotorState_Call {
	return &FakeService_UpdateCargoDoorMotorState_Call{Call: _e.mock.On("UpdateCargoDoorMotorState", ctx, params)}
}

func (_c *FakeService_UpdateCargoDoorMotorState_Call) Run(run func(ctx context.Context, params cargo.UpdateCargoDoorMotorStateParams)) *FakeService_UpdateCargoDoorMotorState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(cargo.UpdateCargoDoorMotorStateParams))
	})
	return _c
}

func (_c *FakeService_UpdateCargoDoorMotorState_Call) Return(_a0 error) *FakeService_UpdateCargoDoorMotorState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeService_UpdateCargoDoorMotorState_Call) RunAndReturn(run func(context.Context, cargo.UpdateCargoDoorMotorStateParams) error) *FakeService_UpdateCargoDoorMotorState_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCargoQRCode provides a mock function with given fields: ctx, params
func (_m *FakeService) UpdateCargoQRCode(ctx context.Context, params cargo.UpdateCargoQRCodeParams) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCargoQRCode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, cargo.UpdateCargoQRCodeParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeService_UpdateCargoQRCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCargoQRCode'
type FakeService_UpdateCargoQRCode_Call struct {
	*mock.Call
}

// UpdateCargoQRCode is a helper method to define mock.On call
//   - ctx context.Context
//   - params cargo.UpdateCargoQRCodeParams
func (_e *FakeService_Expecter) UpdateCargoQRCode(ctx interface{}, params interface{}) *FakeService_UpdateCargoQRCode_Call {
	return &FakeService_UpdateCargoQRCode_Call{Call: _e.mock.On("UpdateCargoQRCode", ctx, params)}
}

func (_c *FakeService_UpdateCargoQRCode_Call) Run(run func(ctx context.Context, params cargo.UpdateCargoQRCodeParams)) *FakeService_UpdateCargoQRCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(cargo.UpdateCargoQRCodeParams))
	})
	return _c
}

func (_c *FakeService_UpdateCargoQRCode_Call) Return(_a0 error) *FakeService_UpdateCargoQRCode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FakeService_UpdateCargoQRCode_Call) RunAndReturn(run func(context.Context, cargo.UpdateCargoQRCodeParams) error) *FakeService_UpdateCargoQRCode_Call {
	_c.Call.Return(run)
	return _c
}

// NewFakeService creates a new instance of FakeService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFakeService(t interface {
	mock.TestingT
	Cleanup(func())
}) *FakeService {
	mock := &FakeService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
