openapi: 3.0.0
info:
  version: 0.1.0
  title: Raybot API
  description: The Raybot API
  license:
    url: https://opensource.org/licenses/MIT
    name: MIT
servers:
  - url: /api/v1
security: []
paths:
  /version:
    get:
      summary: Get application version information
      operationId: getVersion
      description: Get application version information
      tags:
        - version
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Version'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /health:
    get:
      summary: Get the health of the server
      operationId: getHealth
      description: Get the health of the server
      tags:
        - health
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /error-codes:
    get:
      summary: Get all error codes
      operationId: getErrorCodes
      description: Get all error codes
      tags:
        - error-codes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ErrorCodeResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /configs/log:
    get:
      summary: Get the log configuration
      operationId: getLogConfig
      description: Get the log configuration
      tags:
        - config
      responses:
        '200':
          description: The log configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogConfig'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update the log configuration
      operationId: updateLogConfig
      description: Update the log configuration
      tags:
        - config
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogConfig'
      responses:
        '200':
          description: The updated log configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogConfig'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /configs/hardware:
    get:
      summary: Get the hardware configuration
      operationId: getHardwareConfig
      description: Get the hardware configuration
      tags:
        - config
      responses:
        '200':
          description: The hardware configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HardwareConfig'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update the hardware configuration
      operationId: updateHardwareConfig
      description: Update the hardware configuration
      tags:
        - config
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HardwareConfig'
      responses:
        '200':
          description: The updated hardware configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HardwareConfig'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /configs/cloud:
    get:
      summary: Get the cloud configuration
      operationId: getCloudConfig
      description: Get the cloud configuration
      tags:
        - config
      responses:
        '200':
          description: The cloud configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloudConfig'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update the cloud configuration
      operationId: updateCloudConfig
      description: Update the cloud configuration
      tags:
        - config
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CloudConfig'
      responses:
        '200':
          description: The updated cloud configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloudConfig'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /configs/http:
    get:
      summary: Get the HTTP configuration
      operationId: getHTTPConfig
      description: Get the HTTP configuration
      tags:
        - config
      responses:
        '200':
          description: The HTTP configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPConfig'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update the HTTP configuration
      operationId: updateHTTPConfig
      description: Update the HTTP configuration
      tags:
        - config
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HTTPConfig'
      responses:
        '200':
          description: The updated HTTP configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPConfig'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /configs/wifi:
    get:
      summary: Get the wifi configuration
      operationId: getWifiConfig
      description: Get the wifi configuration
      tags:
        - config
      responses:
        '200':
          description: The wifi configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WifiConfig'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update the wifi configuration
      operationId: updateWifiConfig
      description: Update the wifi configuration
      tags:
        - config
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WifiConfig'
      responses:
        '200':
          description: The wifi configuration was updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WifiConfig'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /system/reboot:
    post:
      summary: Reboot the system
      operationId: rebootSystem
      description: Reboot the system.
      tags:
        - system
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /system/stop-emergency:
    post:
      summary: Stop all motors and cancel all running, queued and processing commands
      operationId: stopEmergency
      description: Stop all motors and cancel all running, queued and processing commands
      tags:
        - system
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /robot-state:
    get:
      summary: Get robot state
      operationId: getRobotState
      description: Get the current state of the robot
      tags:
        - robot-state
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RobotStateResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /peripherals/serials:
    get:
      summary: List available serial ports
      operationId: listAvailableSerialPorts
      description: List all available serial ports
      tags:
        - peripherals
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SerialPortListResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /commands/{commandId}:
    get:
      summary: Get a command by ID
      operationId: getCommandById
      description: Get a command by ID
      tags:
        - commands
      parameters:
        - name: commandId
          in: path
          required: true
          schema:
            type: integer
            description: The ID of the command
            example: 1
      responses:
        '200':
          description: The command
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandResponse'
        '404':
          description: The command was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete a command by ID
      operationId: deleteCommandById
      description: Delete a command by ID
      tags:
        - commands
      parameters:
        - name: commandId
          in: path
          required: true
          schema:
            type: integer
            description: The ID of the command
            example: 1
      responses:
        '204':
          description: The command was deleted
        '400':
          description: The command is in processing and can not be deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /commands:
    get:
      summary: List all commands
      operationId: listCommands
      description: List all commands
      tags:
        - commands
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PageSize'
        - name: sorts
          in: query
          description: |
            Sort the commands by the given field. Use `-` to sort in descending order. Use `,` to sort by multiple fields. Example: `-created_at,status` Allowed fields:
              - type
              - status
              - source
              - created_at
              - updated_at
              - completed_at
          required: false
          schema:
            type: string
        - name: statuses
          in: query
          description: |
            Filter the commands by the given statuses. Use `,` to filter by multiple statuses. Example: `QUEUED,PROCESSING` Allowed values:
              - QUEUED
              - PROCESSING
              - SUCCEEDED
              - FAILED
              - CANCELED
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A list of commands
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandsListResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create a command
      operationId: createCommand
      description: Create a command
      tags:
        - commands
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommandRequest'
      responses:
        '201':
          description: The created command
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /commands/processing:
    get:
      summary: Get current processing command
      operationId: getCurrentProcessingCommand
      description: Get the command that is currently being processed
      tags:
        - commands
      responses:
        '200':
          description: The command
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandResponse'
        '404':
          description: No command is currently being processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /commands/processing/cancel:
    post:
      summary: Cancel current processing command
      operationId: cancelCurrentProcessingCommand
      description: Cancel the current processing command
      tags:
        - commands
      responses:
        '204':
          description: The command was canceled
        '400':
          description: There is no command being processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    Version:
      type: object
      properties:
        version:
          type: string
        buildDate:
          type: string
        goVersion:
          type: string
      required:
        - version
        - buildDate
        - goVersion
    FieldError:
      type: object
      properties:
        field:
          type: string
          description: field name
          example: name
          x-order: 1
        message:
          type: string
          description: error message
          example: Name is required
          x-order: 2
      required:
        - field
        - message
    ErrorResponse:
      type: object
      properties:
        code:
          type: string
          description: custom raybot error code
          example: item.NotFound
          x-order: 1
        message:
          type: string
          description: custom raybot error message
          example: Item not found
          x-order: 2
        details:
          type: array
          items:
            $ref: '#/components/schemas/FieldError'
          x-order: 3
      required:
        - code
        - message
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          example: ok
          description: The status of the health check
          x-order: 1
      required:
        - status
    ErrorCodeResponse:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
    LogFileHandler:
      type: object
      properties:
        enable:
          type: boolean
          example: true
          description: Whether to enable the file log
          x-order: 1
        path:
          type: string
          example: logs/raybot.log
          description: The path to the file log
          x-order: 2
        rotationCount:
          type: integer
          example: 10
          description: The number of log files to keep
          x-order: 3
        level:
          type: string
          enum:
            - DEBUG
            - INFO
            - WARN
            - ERROR
          example: DEBUG
          description: The global log level for the application
          x-order: 4
          x-go-type: string
        format:
          type: string
          enum:
            - JSON
            - TEXT
          example: JSON
          description: The log format for the application
          x-order: 5
          x-go-type: string
      required:
        - enable
        - path
        - rotationCount
        - level
        - format
    LogConsoleHandler:
      type: object
      properties:
        enable:
          type: boolean
          example: true
          description: Whether to enable the console log
          x-order: 1
        level:
          type: string
          enum:
            - DEBUG
            - INFO
            - WARN
            - ERROR
          example: DEBUG
          description: The global log level for the application
          x-order: 2
          x-go-type: string
        format:
          type: string
          enum:
            - JSON
            - TEXT
          example: JSON
          description: The log format for the application
          x-order: 3
          x-go-type: string
      required:
        - enable
        - level
        - format
    LogConfig:
      type: object
      properties:
        file:
          $ref: '#/components/schemas/LogFileHandler'
          x-order: 1
        console:
          $ref: '#/components/schemas/LogConsoleHandler'
          x-order: 2
      required:
        - file
        - console
    SerialConfig:
      type: object
      properties:
        port:
          type: string
          example: /dev/ttyUSB0
          description: The port name for the serial connection
          x-order: 1
        baudRate:
          type: integer
          example: 9600
          description: The baud rate for the serial connection
          x-order: 2
        dataBits:
          type: integer
          example: 8
          description: The data bits for the serial connection
          x-order: 3
        stopBits:
          type: number
          format: double
          example: 1
          description: The stop bits for the serial connection
          x-order: 4
          x-go-type: float64
        parity:
          type: string
          enum:
            - NONE
            - EVEN
            - ODD
          example: NONE
          description: The parity for the serial connection
          x-order: 5
          x-go-type: string
        readTimeout:
          type: number
          example: 1
          description: The read timeout for the serial connection in seconds
          x-order: 6
          minimum: 0
          x-go-type: int
      required:
        - port
        - baudRate
        - dataBits
        - stopBits
        - parity
        - readTimeout
    ESPConfig:
      type: object
      properties:
        serial:
          $ref: '#/components/schemas/SerialConfig'
      required:
        - serial
    PICConfig:
      type: object
      properties:
        serial:
          $ref: '#/components/schemas/SerialConfig'
      required:
        - serial
    HardwareConfig:
      type: object
      properties:
        esp:
          $ref: '#/components/schemas/ESPConfig'
        pic:
          $ref: '#/components/schemas/PICConfig'
      required:
        - esp
        - pic
    CloudConfig:
      type: object
      properties:
        enable:
          type: boolean
          example: true
          description: Whether to enable the cloud service
          x-order: 1
        address:
          type: string
          example: localhost:50051
          description: The address for the cloud service
          x-order: 2
        token:
          type: string
          example: 4d24e88b41374b34a54806c0124b4052
          description: The token for the cloud service
          x-order: 3
      required:
        - enable
        - address
        - token
    HTTPConfig:
      type: object
      properties:
        port:
          type: integer
          example: 8000
          description: The port for the HTTP server
          x-order: 1
        swagger:
          type: boolean
          example: true
          description: Whether to enable the Swagger UI
          x-order: 2
      required:
        - port
        - swagger
    APConfig:
      type: object
      properties:
        enable:
          type: boolean
          example: true
          description: Whether to enable the AP mode
          x-order: 1
        ssid:
          type: string
          example: raybot
          description: The SSID for the AP mode
          x-order: 2
        password:
          type: string
          example: password
          description: The password for the AP mode
          x-order: 3
        ip:
          type: string
          example: 192.168.1.1
          description: The IP address for the AP mode
          x-order: 4
      required:
        - enable
        - ssid
        - password
        - ip
    STAConfig:
      type: object
      properties:
        enable:
          type: boolean
          example: true
          description: Whether to enable the STA mode
          x-order: 1
        ssid:
          type: string
          example: raybot
          description: The SSID for the wifi connection
          x-order: 2
        password:
          type: string
          example: password
          description: The password for the wifi connection
          x-order: 3
      required:
        - enable
        - ssid
        - password
    WifiConfig:
      type: object
      properties:
        ap:
          $ref: '#/components/schemas/APConfig'
        sta:
          $ref: '#/components/schemas/STAConfig'
      required:
        - ap
        - sta
    BatteryState:
      type: object
      properties:
        current:
          type: integer
          example: 100
          description: The current of the battery
          x-order: 1
          x-go-type: uint16
        temp:
          type: integer
          example: 25
          description: The temperature of the battery
          x-order: 2
          x-go-type: uint8
        voltage:
          type: integer
          example: 120
          description: The voltage of the battery
          x-order: 3
          x-go-type: uint16
        cellVoltages:
          type: array
          items:
            type: integer
          example:
            - 12
            - 12
            - 12
            - 12
          description: The cell voltages of the battery
          x-order: 4
          x-go-type: '[]uint16'
        percent:
          type: integer
          example: 50
          description: The percentage of the battery
          x-order: 5
          x-go-type: uint8
        fault:
          type: integer
          example: 0
          description: The fault of the battery
          x-order: 6
          x-go-type: uint8
        health:
          type: integer
          example: 100
          description: The health of the battery
          x-order: 7
          x-go-type: uint8
        updatedAt:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00Z'
          description: The updated at time of the battery
          x-order: 8
      required:
        - current
        - temp
        - voltage
        - cellVoltages
        - percent
        - fault
        - health
        - updatedAt
    ChargeState:
      type: object
      properties:
        currentLimit:
          type: integer
          example: 100
          description: The current limit of the charge
          x-order: 1
          x-go-type: uint16
        enabled:
          type: boolean
          example: true
          description: Whether the charge is enabled
          x-order: 2
        updatedAt:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00Z'
          description: The updated at time of the charge
          x-order: 3
      required:
        - currentLimit
        - enabled
        - updatedAt
    DischargeState:
      type: object
      properties:
        currentLimit:
          type: integer
          example: 100
          description: The current limit of the discharge
          x-order: 1
          x-go-type: uint16
        enabled:
          type: boolean
          example: true
          description: Whether the discharge is enabled
          x-order: 2
        updatedAt:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00Z'
          description: The updated at time of the discharge
          x-order: 3
      required:
        - currentLimit
        - enabled
        - updatedAt
    DistanceSensorState:
      type: object
      properties:
        frontDistance:
          type: integer
          example: 100
          description: The front distance of the distance sensor
          x-order: 1
          x-go-type: uint16
        backDistance:
          type: integer
          example: 100
          description: The back distance of the distance sensor
          x-order: 2
          x-go-type: uint16
        downDistance:
          type: integer
          example: 100
          description: The down distance of the distance sensor
          x-order: 3
          x-go-type: uint16
        updatedAt:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00Z'
          description: The updated at time of the distance sensor
          x-order: 4
      required:
        - frontDistance
        - backDistance
        - downDistance
        - updatedAt
    LiftMotorState:
      type: object
      properties:
        currentPosition:
          type: integer
          example: 100
          description: The current position of the lift motor
          x-order: 1
          x-go-type: uint16
        targetPosition:
          type: integer
          example: 100
          description: The target position of the lift motor
          x-order: 2
          x-go-type: uint16
        isRunning:
          type: boolean
          example: true
          description: Whether the lift motor is running
          x-order: 3
        enabled:
          type: boolean
          example: true
          description: Whether the lift motor is enabled
          x-order: 4
        updatedAt:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00Z'
          description: The updated at time of the lift motor
          x-order: 5
      required:
        - currentPosition
        - targetPosition
        - isRunning
        - enabled
        - updatedAt
    DriveMotorState:
      type: object
      properties:
        direction:
          type: string
          enum:
            - FORWARD
            - BACKWARD
          example: FORWARD
          description: The direction of the drive motor
          x-order: 1
          x-go-type: string
        speed:
          type: integer
          example: 100
          description: The speed of the drive motor (0-100)
          x-order: 2
          x-go-type: uint8
        isRunning:
          type: boolean
          example: true
          description: Whether the drive motor is running
          x-order: 3
        enabled:
          type: boolean
          example: true
          description: Whether the drive motor is enabled
          x-order: 4
        updatedAt:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00Z'
          description: The updated at time of the drive motor
          x-order: 5
      required:
        - direction
        - speed
        - isRunning
        - enabled
        - updatedAt
    LocationState:
      type: object
      properties:
        currentLocation:
          type: string
          example: ABCxyz
          description: The current location of the robot
          x-order: 1
        updatedAt:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00Z'
          description: The updated at time of the location
          x-order: 2
      required:
        - currentLocation
        - updatedAt
    CargoState:
      type: object
      properties:
        isOpen:
          type: boolean
          example: true
          description: Whether the cargo is open
          x-order: 1
        qrCode:
          type: string
          example: ABCxyz
          description: The QR code read from the cargo QR scanner
          x-order: 2
        bottomDistance:
          type: integer
          example: 100
          description: The bottom distance of the cargo
          x-order: 3
          x-go-type: uint16
        updatedAt:
          type: string
          format: date-time
          example: '2025-01-01T00:00:00Z'
          description: The updated at time of the cargo
          x-order: 4
      required:
        - isOpen
        - qrCode
        - bottomDistance
        - updatedAt
    CargoDoorMotorState:
      type: object
      properties:
        direction:
          type: string
          enum:
            - CLOSE
            - OPEN
          example: CLOSE
          description: The direction of the cargo door motor
          x-order: 1
          x-go-type: string
        speed:
          type: integer
          example: 100
          description: The speed of the cargo door motor
          x-order: 2
          x-go-type: uint8
        isRunning:
          type: boolean
          example: true
          description: Whether the cargo door motor is running
          x-order: 3
        enabled:
          type: boolean
          example: true
          description: Whether the cargo door motor is enabled
          x-order: 4
        updatedAt:
          type: string
          format: date-time
          example: '2025-01-01T00:00:00Z'
          description: The updated at time of the cargo door motor
          x-order: 5
      required:
        - direction
        - speed
        - isRunning
        - enabled
        - updatedAt
    CloudConnection:
      type: object
      properties:
        connected:
          type: boolean
          x-order: 1
        lastConnectedAt:
          type: string
          format: date-time
          nullable: true
          x-order: 2
        uptime:
          type: number
          description: The uptime of the cloud connection in seconds
          x-order: 3
        error:
          type: string
          nullable: true
          x-order: 4
      required:
        - connected
        - lastConnectedAt
        - uptime
        - error
    ESPSerialConnection:
      type: object
      properties:
        connected:
          type: boolean
          x-order: 1
        lastConnectedAt:
          type: string
          format: date-time
          nullable: true
          x-order: 2
        error:
          type: string
          nullable: true
          x-order: 3
      required:
        - connected
        - lastConnectedAt
        - error
    PICSerialConnection:
      type: object
      properties:
        connected:
          type: boolean
          x-order: 1
        lastConnectedAt:
          type: string
          format: date-time
          nullable: true
          x-order: 2
        error:
          type: string
          nullable: true
          x-order: 3
      required:
        - connected
        - lastConnectedAt
        - error
    RFIDUSBConnection:
      type: object
      properties:
        connected:
          type: boolean
          x-order: 1
        lastConnectedAt:
          type: string
          format: date-time
          nullable: true
          x-order: 2
        error:
          type: string
          nullable: true
          x-order: 3
      required:
        - connected
        - lastConnectedAt
        - error
    AppConnection:
      type: object
      properties:
        cloudConnection:
          $ref: '#/components/schemas/CloudConnection'
          x-order: 1
        espSerialConnection:
          $ref: '#/components/schemas/ESPSerialConnection'
          x-order: 2
        picSerialConnection:
          $ref: '#/components/schemas/PICSerialConnection'
          x-order: 3
        rfidUsbConnection:
          $ref: '#/components/schemas/RFIDUSBConnection'
          x-order: 4
      required:
        - cloudConnection
        - espSerialConnection
        - picSerialConnection
        - rfidUsbConnection
    RobotStateResponse:
      type: object
      properties:
        battery:
          $ref: '#/components/schemas/BatteryState'
          x-order: 1
        charge:
          $ref: '#/components/schemas/ChargeState'
          x-order: 2
        discharge:
          $ref: '#/components/schemas/DischargeState'
          x-order: 3
        distanceSensor:
          $ref: '#/components/schemas/DistanceSensorState'
          x-order: 4
        liftMotor:
          $ref: '#/components/schemas/LiftMotorState'
          x-order: 5
        driveMotor:
          $ref: '#/components/schemas/DriveMotorState'
          x-order: 6
        location:
          $ref: '#/components/schemas/LocationState'
          x-order: 7
        cargo:
          $ref: '#/components/schemas/CargoState'
          x-order: 8
        cargoDoorMotor:
          $ref: '#/components/schemas/CargoDoorMotorState'
          x-order: 9
        appConnection:
          $ref: '#/components/schemas/AppConnection'
          x-order: 10
      required:
        - battery
        - charge
        - discharge
        - distanceSensor
        - liftMotor
        - driveMotor
        - location
        - cargo
        - cargoDoorMotor
        - appConnection
    SerialPort:
      type: object
      properties:
        port:
          type: string
          description: The port of the serial port
          example: /dev/ttyUSB0
          x-order: 1
      required:
        - port
    SerialPortListResponse:
      type: object
      properties:
        items:
          type: array
          description: The list of serial ports
          items:
            $ref: '#/components/schemas/SerialPort'
          x-order: 1
      required:
        - items
    CommandType:
      type: string
      enum:
        - STOP_MOVEMENT
        - MOVE_FORWARD
        - MOVE_BACKWARD
        - MOVE_TO
        - CARGO_OPEN
        - CARGO_CLOSE
        - CARGO_LIFT
        - CARGO_LOWER
        - CARGO_CHECK_QR
        - SCAN_LOCATION
        - WAIT
      description: The type of command
      x-go-type: string
    CommandStatus:
      type: string
      enum:
        - QUEUED
        - PROCESSING
        - SUCCEEDED
        - FAILED
        - CANCELED
      description: The status of the command
      x-go-type: string
    CommandSource:
      type: string
      enum:
        - CLOUD
      description: The source of the command
      x-go-type: string
    StopInputs:
      type: object
    MotorSpeed:
      type: integer
      description: The speed of the motor
      example: 100
      minimum: 0
      maximum: 100
      x-go-type: uint8
    MoveForwardInputs:
      type: object
      properties:
        motorSpeed:
          $ref: '#/components/schemas/MotorSpeed'
      required:
        - motorSpeed
    MoveBackwardInputs:
      type: object
      properties:
        motorSpeed:
          $ref: '#/components/schemas/MotorSpeed'
      required:
        - motorSpeed
    MoveDirection:
      type: string
      enum:
        - FORWARD
        - BACKWARD
      description: The direction when moving
      x-go-type: string
    MoveToInputs:
      type: object
      properties:
        location:
          type: string
          description: The location to move to
          example: 1e8asj
        direction:
          $ref: '#/components/schemas/MoveDirection'
          description: The direction when moving
          x-order: 2
        motorSpeed:
          $ref: '#/components/schemas/MotorSpeed'
          x-order: 3
      required:
        - location
        - direction
        - motorSpeed
    CargoOpenInputs:
      type: object
      properties:
        motorSpeed:
          $ref: '#/components/schemas/MotorSpeed'
      required:
        - motorSpeed
    CargoCloseInputs:
      type: object
      properties:
        motorSpeed:
          $ref: '#/components/schemas/MotorSpeed'
      required:
        - motorSpeed
    CargoLiftInputs:
      type: object
      properties:
        position:
          type: integer
          description: The position to lift the cargo
          example: 100
          x-order: 1
          x-go-type: uint16
        motorSpeed:
          $ref: '#/components/schemas/MotorSpeed'
          x-order: 2
      required:
        - position
        - motorSpeed
    BottomObstacleTracking:
      type: object
      properties:
        enterDistance:
          type: integer
          description: Start detecting obstacle when distance is below this value
          example: 100
          x-order: 1
          x-go-type: uint16
        exitDistance:
          type: integer
          description: Stop detecting obstacle when distance is above this value
          example: 200
          x-order: 2
          x-go-type: uint16
      required:
        - enterDistance
        - exitDistance
    CargoLowerInputs:
      type: object
      properties:
        position:
          type: integer
          description: The position to lower the cargo
          example: 100
          x-order: 1
          x-go-type: uint16
        motorSpeed:
          $ref: '#/components/schemas/MotorSpeed'
        bottomObstacleTracking:
          $ref: '#/components/schemas/BottomObstacleTracking'
      required:
        - position
        - motorSpeed
        - bottomObstacleTracking
    CargoCheckQRInputs:
      type: object
      properties:
        qrCode:
          type: string
          description: The QR code to check
          example: 1e8asj
      required:
        - qrCode
    ScanLocationInputs:
      type: object
    WaitInputs:
      type: object
      properties:
        durationMs:
          type: integer
          description: The duration in milliseconds
          example: 1000
      required:
        - durationMs
    CommandInputs:
      oneOf:
        - $ref: '#/components/schemas/StopInputs'
        - $ref: '#/components/schemas/MoveForwardInputs'
        - $ref: '#/components/schemas/MoveBackwardInputs'
        - $ref: '#/components/schemas/MoveToInputs'
        - $ref: '#/components/schemas/CargoOpenInputs'
        - $ref: '#/components/schemas/CargoCloseInputs'
        - $ref: '#/components/schemas/CargoLiftInputs'
        - $ref: '#/components/schemas/CargoLowerInputs'
        - $ref: '#/components/schemas/CargoCheckQRInputs'
        - $ref: '#/components/schemas/ScanLocationInputs'
        - $ref: '#/components/schemas/WaitInputs'
    StopOutputs:
      type: object
    MoveForwardOutputs:
      type: object
    MoveBackwardOutputs:
      type: object
    MoveToOutputs:
      type: object
    CargoOpenOutputs:
      type: object
    CargoCloseOutputs:
      type: object
    CargoLiftOutputs:
      type: object
    CargoLowerOutputs:
      type: object
    CargoCheckQROutputs:
      type: object
    Location:
      type: object
      properties:
        location:
          type: string
          description: The location (RFID tag)
          example: 1uxa91o
        scannedAt:
          type: string
          format: date-time
          description: The date and time when the location was scanned
          example: '2025-04-18T12:00:00Z'
      required:
        - location
        - scannedAt
    ScanLocationOutputs:
      type: object
      properties:
        locations:
          type: array
          items:
            $ref: '#/components/schemas/Location'
      required:
        - locations
    WaitOutputs:
      type: object
    CommandOutputs:
      oneOf:
        - $ref: '#/components/schemas/StopOutputs'
        - $ref: '#/components/schemas/MoveForwardOutputs'
        - $ref: '#/components/schemas/MoveBackwardOutputs'
        - $ref: '#/components/schemas/MoveToOutputs'
        - $ref: '#/components/schemas/CargoOpenOutputs'
        - $ref: '#/components/schemas/CargoCloseOutputs'
        - $ref: '#/components/schemas/CargoLiftOutputs'
        - $ref: '#/components/schemas/CargoLowerOutputs'
        - $ref: '#/components/schemas/CargoCheckQROutputs'
        - $ref: '#/components/schemas/ScanLocationOutputs'
        - $ref: '#/components/schemas/WaitOutputs'
    CommandResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
          description: The id of the command
          x-order: 1
        type:
          $ref: '#/components/schemas/CommandType'
          description: The type of command
          x-order: 2
        status:
          $ref: '#/components/schemas/CommandStatus'
          description: The status of the command
          x-order: 3
        source:
          $ref: '#/components/schemas/CommandSource'
          description: The source of the command
          x-order: 4
        inputs:
          $ref: '#/components/schemas/CommandInputs'
          description: The inputs of the command
          x-order: 5
        outputs:
          $ref: '#/components/schemas/CommandOutputs'
          description: The outputs of the command
          x-order: 6
        error:
          type: string
          nullable: true
          description: The error of the command
          x-order: 7
        startedAt:
          type: string
          nullable: true
          format: date-time
          description: The start date of the command
          x-order: 8
        completedAt:
          type: string
          nullable: true
          format: date-time
          description: The completion date of the command
          x-order: 9
        createdAt:
          type: string
          format: date-time
          description: The creation date of the command
          x-order: 10
        updatedAt:
          type: string
          format: date-time
          description: The update date of the command
          x-order: 11
      required:
        - id
        - type
        - status
        - source
        - inputs
        - outputs
        - error
        - startedAt
        - completedAt
        - createdAt
        - updatedAt
    CommandsListResponse:
      type: object
      properties:
        totalItems:
          type: integer
          description: The total number of commands
          example: 100
        items:
          type: array
          items:
            $ref: '#/components/schemas/CommandResponse'
          description: The list of commands
          x-order: 2
      required:
        - totalItems
        - items
    CreateCommandRequest:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/CommandType'
          description: The type of command
          x-order: 1
        inputs:
          $ref: '#/components/schemas/CommandInputs'
          description: The inputs of the command
          x-order: 2
      required:
        - type
        - inputs
  parameters:
    Page:
      name: page
      in: query
      schema:
        type: integer
        format: uint
        minimum: 1
        default: 1
      description: The page number
      required: false
    PageSize:
      name: pageSize
      in: query
      schema:
        type: integer
        format: uint
        minimum: 1
        default: 10
      description: The number of items per page
      required: false
